buildscript {
	println("Using profile: ${profile}")
	File f = new File("${project.projectDir}/gradle-${profile}.properties")
	if (f.exists()) {
		println("Loading $f.absoluteFile")
		Properties props = new Properties()
		props.load(f.newDataInputStream())
		for (String s : props.stringPropertyNames()) {
			setProperty(s, props.getProperty(s))
		}
	}
	ext.cfg = project.properties
	repositories {
		maven { url "$cfg.repository"; }
	}
	dependencies {
		classpath("io.jrevolt.plugins:io.jrevolt.plugins.gradle:develop-SNAPSHOT")
	}
}

ext {
	branch = "$git rev-parse --abbrev-ref HEAD".execute().in.text.trim()
	branchShort = branch.replaceFirst(".*/", "")
	commit = "$git rev-parse HEAD".execute().in.text.trim()
	commitShort = commit.substring(0, 7)
	gitDescribe = "$git describe --match=${basetag} --tags --dirty".execute().in.text.trim()
	snapshotVersion = "${branchShort}-SNAPSHOT"
	releaseVersion = "${gitDescribe}"
	buildTimestamp = new Date()
}

allprojects {
}

subprojects {

	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'jrevolt'
	apply plugin: 'maven-publish'
	

	project.group = rootProject.name
	project.version = Boolean.valueOf("${release}") ? "${releaseVersion}" : "${snapshotVersion}"

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

// WARNING: Gradle 1.11 uses ASM that does not yet support bytecode produced with -parameters. Tests will fail
	[compileJava, compileTestJava]*.options*.compilerArgs = ['-parameters']

	buildDir = "${rootProject.projectDir}/.build/${project.name}"

	// allow resources in java sources
	sourceSets {
		main {
			java.srcDirs = ['src/main/java']
			resources.srcDirs = ['src/main/java', 'src/main/resources']
			resources.exclude("**/*.java")
		}
		test {
			java.srcDirs = ['src/test/java']
			resources.srcDirs = ['src/test/java', 'src/test/resources']
			resources.exclude("**/*.java")
		}
	}


	dependencies {
//		compile("org.apache.commons:commons-lang3:3.1")
//		compile("commons-io:commons-io:2.4")
//		compile("org.glassfish.jersey.core:jersey-client:2.8-SNAPSHOT")
		//testCompile("junit:junit:4.11")
		testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
	}

	repositories {
		maven { url "$cfg.repository"; }
	}

	compileJava.doLast { task ->
		manifest {
			def mf = "${project.buildDir}/classes/main/META-INF/MANIFEST.MF"
			if (new File(mf).exists()) {
				from file(mf)
			}
//			attributes(
//					"Artifact-URI"					: "$project.group:$project.name:$project.version",
//					"Artifact-Version" 			: "$branchShort-$commitShort",
//					"Build-Timestamp" 			: buildTimestamp.format("yyyyMMdd-HHmmZ"),
//					"Build-Timestamp-Format"	: "yyyyMMdd-HHmmZ",
//					)
//			writeTo(project.buildDir.toString()+"/classes/main/META-INF/MANIFEST.MF")
		}
	}

	jar {
		manifest {
			def mf = "${projectDir}/src/main/META-INF/MANIFEST.MF"
			if (new File(mf).exists()) {
				from file(mf)
			}
			attributes(
				"Artifact-URI"					: "$project.group:$project.name:$project.version",
				"Artifact-Version" 			: "$branchShort-$gitDescribe",
				"Build-Timestamp" 			: buildTimestamp.format("yyyyMMdd-HHmmZ"),
				"Build-Timestamp-Format"	: "yyyyMMdd-HHmmZ",
			)
		}
	}

//	jar.doLast { task ->
//		["jarsigner", "-keystore", "${keyStoreFile}", "-storepass", "${keyStorePassword}", "-keypass", "${keyPassword}",
//		 task.archivePath, "${keyAlias}"].execute()
//	}


	task sourceJar(type: Jar) {
		from sourceSets.main.allJava
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from components.java
				artifact sourceJar {
					classifier "sources"
				}
			}
		}
		repositories {
			maven {
				url Boolean.valueOf("${release}") ? "$cfg.releases" : "$cfg.snapshots"
				credentials {
					username "$cfg.deploymentUserName"
					password "$cfg.deploymentPassword"
				}
			}
		}
	}

}


