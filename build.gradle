
buildscript {
	ext {
		springVersion = "4.1.6.RELEASE"
		springBootVersion = "1.3.0.BUILD-SNAPSHOT"
		jerseyVersion="2.14"
		activemqVersion = "5.11.1"
		jettyVersion = "9.2.9.v20150224"
	}
	repositories {
//		mavenLocal()
		maven { url "$nexusUrl/content/groups/public/";
			credentials { username="$nexusUser"; password="$nexusPassword"; }
		}
//		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
//		classpath("javax:javax.tools:1.8")
	}
}

ext {
	branch = "$git rev-parse --abbrev-ref HEAD".execute().in.text.trim()
	branch = "prod"
	branchShort = branch.replaceFirst(".*/", "")
	commit = "$git rev-parse HEAD".execute().in.text.trim()
	commitShort = commit.length() > 7 ? commit.substring(0, 7) : commit
	tag = branch.matches("master") ? "$git describe --tags --exact-match".execute().in.text.trim() : null
	gitDescribe = "$git describe --always --dirty=-${System.properties['user.name']}".execute().in.text.trim()
	snapshotVersion = "${branchShort}-SNAPSHOT"
	releaseVersion = tag ? "${tag}-${commitShort}" : null
	buildTimestamp = new Date()
}

subprojects {

	apply plugin: 'java'
	apply plugin: 'maven'
	apply plugin: 'distribution'
	apply plugin: org.springframework.boot.gradle.SpringBootPlugin

	group = "io.jrevolt.sysmon"
	version = "${releaseVersion ?: snapshotVersion}"

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

// WARNING: Gradle 1.11 uses ASM that does not yet support bytecode produced with -parameters. Tests will fail
	[compileJava, compileTestJava]*.options*.compilerArgs = ['-parameters']

	buildDir = "${rootProject.projectDir}/.build/${project.name}"

	// allow resources in java sources
	sourceSets {
		main {
			java.srcDirs = ['src/main/java']
			resources.srcDirs = ['src/main/java', 'src/main/resources']
			resources.exclude("**/*.java")
		}
		test {
			java.srcDirs = ['src/test/java']
			resources.srcDirs = ['src/test/java', 'src/test/resources']
			resources.exclude("**/*.java")
		}
	}

	springBoot {
		layout = "NULL"
		backupSource = false
		mainClassName = "UNDEFINED"
	}

	dependencies {
//		compile("org.apache.commons:commons-lang3:3.1")
//		compile("commons-io:commons-io:2.4")
//		compile("org.glassfish.jersey.core:jersey-client:2.8-SNAPSHOT")
		testCompile("junit:junit:4.11")
	}

	repositories {
//		mavenLocal()
		maven { url "$nexusUrl/content/groups/public/";
			credentials { username="$nexusUser"; password="$nexusPassword"; }
		}
//		mavenCentral()
	}

	compileJava.doLast { task ->
		manifest {
			def mf = "${project.buildDir}/classes/main/META-INF/MANIFEST.MF"
			if (new File(mf).exists()) {
				from file(mf)
			}
//			attributes(
//					"Artifact-URI"					: "$project.group:$project.name:$project.version",
//					"Artifact-Version" 			: "$branchShort-$commitShort",
//					"Build-Timestamp" 			: buildTimestamp.format("yyyyMMdd-HHmmZ"),
//					"Build-Timestamp-Format"	: "yyyyMMdd-HHmmZ",
//					)
//			writeTo(project.buildDir.toString()+"/classes/main/META-INF/MANIFEST.MF")
		}
	}

	jar {
		manifest {
			def mf = "${projectDir}/src/main/META-INF/MANIFEST.MF"
			if (new File(mf).exists()) {
				from file(mf)
			}
			attributes(
				"Artifact-URI"					: "$project.group:$project.name:$project.version",
				"Artifact-Version" 			: "$branchShort-$gitDescribe",
				"Build-Timestamp" 			: buildTimestamp.format("yyyyMMdd-HHmmZ"),
				"Build-Timestamp-Format"	: "yyyyMMdd-HHmmZ",
			)
		}
	}

	// FIXME QDH don't know yet how to get rid of distZip and distTar artifacts
	configurations.archives.artifacts.with { archives ->
		new ArrayList(archives).each {
			if (it.file.name.matches('.*(zip|tar)$')) {
				remove(it)
			}
		}
	}

//	jar.doLast { task ->
//		["jarsigner", "-keystore", "${keyStoreFile}", "-storepass", "${keyStorePassword}", "-keypass", "${keyPassword}",
//		 task.archivePath, "${keyAlias}"].execute()
//	}

	uploadArchives {
		repositories {
			mavenDeployer {
				repository(url: "$nexusUrl/content/repositories/snapshots") {
					authentication(userName: "$nexusUser", password: "$nexusPassword")
				}
			}
		}
	}
}


